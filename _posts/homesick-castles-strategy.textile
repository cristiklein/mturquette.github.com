---
layout: post
title: Homesick, castles and strategy
category: posts
---

!/images/homesick-castles-strategy/have-fun-storming-the-castle.png(Billy Crystal loves git)!

"Homesick":https://github.com/technicalpickles/homesick is a nice bit of software written by Josh Nichols aka technicalpickles.  Homesick makes it easy to maintain, update and deploy your configuration files (dotfiles) on any host, thus preventing you from feeling homesick when working across machines.

Homesick operates on _castles_, git repositories containing configuration files following a specific format.  The format is mercifully simple: each git repo has a top-level directory named "home", and that directory contains the directories and dotfiles arranged in the paths you expect to see on the host.  When deploying a home directory to a new host homesick will clone the git repository somewhere and then symlink the dotfiles to their _real_ paths.

h2. installation

The homesick git repository doesn't actually contain any l33t dotfiles.  You only need to clone that if you want to hack on homesick itself.  Instead install homesick via gem.

bc. $ sudo gem install homesick

h1. castles are meant to be shared

The best castles will be topical and concise.  Imagine that you are an Ubuntu user that prefers Vim and Bash.  You see a large git repo containg an awesome .vimrc and many useful plugins, but it also has a ton of OSX specific dotfiles as well as Emacs and Zsh bits.  It might be worth your time to pick through the pieces that you care about but wouldn't it be better if each of those pieces of software had their own separate castle?

The best strategy is to plan early and expect to have a kingdom full of castles.  Or a forest full of git trees.  Git submodules are the way to go.

I manage my castles in a super-repository named "kingdom":TODO.  Kingdom is filled with castles (har har) as well as any deployment scripts I want to use that do not neatly fit into a castle.

Below are the steps I used when creating my email castle.  Note that this castle contains configuration files for offlineimap, notmuch, afew and alot.  Suprisingly those are all names of software projects and not typos.

bc. s $ cd ~/src/homesick-castles
$ homesick generate mturquette-email
      create  mturquette-email
    git init
      create  mturquette-email/home
$ cd mturquette-email/home/
$ cp -a ~/.offlineimaprc ~/.notmuch-config ~/.config/afew/ ~/.config/alot/ ~/.local/bin/
afew        alot        mail.cron   mail.print  notmuch     
$ cp -a ~/.offlineimaprc ~/.notmuch-config ~/.config/afew/ ~/.config/alot/ ~/.local/bin/mail.cron ~/.local/bin/mail.print ./
$ mkdir -p .config .local/bin
$ mv alot/ afew/ .config/
$ mv mail.cron mail.print .local/bin/
$ ls -l
total 48
drwxrwxr-x 4 mturquette mturquette 4096 Jan  8 00:28 .
drwxrwxr-x 4 mturquette mturquette 4096 Jan  7 23:01 ..
drwxrwxr-x 4 mturquette mturquette 4096 Jan  8 00:27 .config
drwxrwxr-x 3 mturquette mturquette 4096 Jan  8 00:27 .local
-rw-rw-r-- 1 mturquette mturquette 2335 Jan  6 20:03 .notmuch-config
-rw------- 1 mturquette mturquette 9479 Jan  6 18:06 .offlineimaprc

That simple.

I hope you enjoy using 

<iframe width="420" height="315" src="http://www.youtube.com/embed/OwKXggW7naI" frameborder="0" allowfullscreen></iframe>

mkdir -p ~/.homesick/repos
cd ~/.homesick/repos
homesick generate mturquette/castle-email

---

h1. REBOOT

Managing ones home directory can be a chore.  Keeping configuration files in sync across environments and sharing those configurations with others is important.  This is now more true than ever in a world with virtualization where one might find themselves setting up new servers and application instances at a high frequency.

I was delighted to see that Github dedicated a "page":http://dotfiles.github.com/ to the problem of managing ones dotfiles.  However as I dug deeper into each framework I discovered one cold, hard truth.

h1. they all suck

"Issue #12":https://github.com/technicalpickles/homesick/issues/12 nicely describes a problem not only affects homesick, but also homeshick, and ghar.  None of these frameworks can handle directories.  A common example would be any configuration file under $HOME/.config.  This is pretty common in Ubuntu-land.  Ufortunately these tools are not smart enough to traverse into .config and then populate the symlinks.  Instead they want to have the one and only copy of the entire .config directory, and make that whole directory a symlink.

This is a deal breaker for a couple of reasons.  First, it simply does not work for a common case that many users want to solve.  It should be no surprise that homesick's Issue #12 can be found as ghar's "Issue #7":https://github.com/philips/ghar/pull/7.

Secondly, a primary goal of any of these frameworks should be that users can share and re-use useful configurations.  As such the frameworks should reward users who make concise, on-topic git repos that Do One Thing And Do It Well.  For instance a Vim configuration repo that only pertains to Vim configuration, as opposed to a mega repository which contains Vim, Ruby, Bash and Zsh configurations tailored to a single users liking.  How does a mega repository benefit anyone besides the person who created that repository?  We all go back to hunting and picking snippets here and there and the whole point of hosting a framework on github is lost.

h1. separating tools and dotfiles

It is the second reason outlined above that Ben Alman's "dotfiles":https://github.com/cowboy/dotfiles project doesn't work for me either.  While it is well-designed in many respects and clearly well-liked, there is no separation between the management tool and the configuration files.  This greatly inhibits sharing.  The only way to share in that project is to make a monolithic mega-repository that includes the kitchen sink, and that is exactly what has been done.

h1. we've been here before

What is it that I really want from these dotfiles tools?  Package management.  A problem that has been solved many times over many years.  Why are we still struggling with this?  From the perspective of a dotfiles tool I want it to grab a git repo and install it sensibly.  I do not want to have worry about symlink clobbering, or an inability to recurse in a directory that already exists.  All I want is to either make a duplicate of a master configuration file and copy it to it's correct location or symlink it.  Either way this isn't asking too much.  Any Debian package or RPM could do this.  Unfornately making packages on those systems incur a higher barrier of entry than simply tossing some files into a git repository.

So that is my proposal.  Someone please make a git-based configuration managment tool which acts like a package manager.  Kthx.
